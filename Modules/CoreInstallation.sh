#!/bin/bash

# Core Installation for stable branch

CoreInstallation() {
    PrintHeader "Base System Installation"
    
    # Check required commands
    for cmd in pacstrap genfstab arch-chroot; do
        if ! command -v "$cmd" >/dev/null 2>&1; then
            HandleFatalError "Required command not found: $cmd. Please run from Arch Linux live environment."
        fi
    done

    # Validate mount point
    if ! mountpoint -q /mnt; then
        HandleFatalError "/mnt is not a mountpoint. Filesystem setup must be completed first."
    fi

    # Refresh keys and mirrors with better error handling
    PrintStatus "Updating package databases and keyring"
    pacman-key --init || HandleFatalError "Failed to initialize pacman keyring"
    pacman-key --populate archlinux || HandleFatalError "Failed to populate archlinux keyring"
    pacman -Sy --noconfirm || HandleFatalError "Failed to update package databases"

    local kernel_pkg="linux-zen"
    if [[ "$USE_ZEN_KERNEL" != true ]]; then kernel_pkg="linux"; fi

    # Install base packages with ZFS support if needed
    local base_packages="base $kernel_pkg linux-firmware amd-ucode networkmanager zsh sudo vim git curl wget"
    
    # Add hardware-specific packages for Z13 Flow 2025
    base_packages="$base_packages mesa vulkan-radeon libva-mesa-driver mesa-vdpau"
    
    if [[ "$FILESYSTEM" == "zfs" ]]; then
        local zfs_pkg="zfs-linux"
        if [[ "$USE_ZEN_KERNEL" == true ]]; then
            zfs_pkg="zfs-linux-zen"
        fi
        base_packages="$base_packages $zfs_pkg zfs-utils"
        PrintStatus "Including ZFS packages: $zfs_pkg zfs-utils"
    fi
    
    PrintStatus "Installing base system packages: $base_packages"
    pacstrap /mnt $base_packages || HandleFatalError "pacstrap failed - check network connection and package availability"
    
    # Verify critical packages were installed
    local critical_packages=("$kernel_pkg" "networkmanager" "sudo")
    for pkg in "${critical_packages[@]}"; do
        if ! arch-chroot /mnt pacman -Q "$pkg" >/dev/null 2>&1; then
            HandleFatalError "Critical package $pkg was not installed properly"
        fi
    done
    
    PrintStatus "Base system packages installed successfully"

    # Generate fstab (skip for ZFS as it handles its own mounting)
    if [[ "$FILESYSTEM" != "zfs" ]]; then
        genfstab -U /mnt >> /mnt/etc/fstab
    else
        PrintStatus "Skipping fstab generation for ZFS (uses its own mount handling)"
        # Create minimal fstab for non-ZFS mounts
        echo "# Generated by genfstab" > /mnt/etc/fstab
        if [[ -n "$EFI_PART" ]]; then
            local efi_uuid=$(blkid -s UUID -o value "$EFI_PART")
            echo "UUID=$efi_uuid /boot vfat defaults 0 2" >> /mnt/etc/fstab
        fi
        if [[ -n "$SWAP_PART" ]]; then
            local swap_uuid=$(blkid -s UUID -o value "$SWAP_PART")
            echo "UUID=$swap_uuid none swap defaults 0 0" >> /mnt/etc/fstab
        fi
    fi

    # Basic system config
    echo "$HOSTNAME" > /mnt/etc/hostname
    arch-chroot /mnt ln -sf "/usr/share/zoneinfo/${TIMEZONE:-UTC}" /etc/localtime || true
    arch-chroot /mnt hwclock --systohc || true

    # Locale
    if [[ -n "$DEFAULT_LOCALE" ]]; then
        sed -i "s/^#\(${DEFAULT_LOCALE}.*\)$/\1/" /mnt/etc/locale.gen || true
        arch-chroot /mnt locale-gen || true
        echo "LANG=${DEFAULT_LOCALE}" > /mnt/etc/locale.conf
    fi

    # Enable NetworkManager
    arch-chroot /mnt systemctl enable NetworkManager || true

    # Create user
    local user="${USERNAME:-archuser}"
    arch-chroot /mnt useradd -m -G wheel -s /bin/zsh "$user" || true
    echo "%wheel ALL=(ALL:ALL) ALL" > /mnt/etc/sudoers.d/10-wheel

    # Set passwords if collected
    if [[ -n "$ROOT_PASSWORD" && -n "$USER_PASSWORD" ]]; then
        SetPasswordsNonInteractive "$ROOT_PASSWORD" "$USER_PASSWORD" "$user"
    fi

    PrintStatus "Base system installed"
}
